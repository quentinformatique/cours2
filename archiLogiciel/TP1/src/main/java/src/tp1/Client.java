/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src.tp1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;

/**
 *
 * @author lbath
 */
public class Client extends javax.swing.JFrame {
    
    /** Socket de communication avec le serveur  */
    private Socket socket;
    /** Flux de lecture relié au canal d'entrée du socket  */
    private BufferedReader in;
    /** Flux de sortie relié au canal de sortie du socket */
    private PrintWriter out;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIPServeur = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        btnConnecter = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessageAenvoyer = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMessagesRecus = new javax.swing.JTextArea();
        btnEnvoyer = new javax.swing.JButton();
        btnDeconnecter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP serveur");

        jLabel2.setText("Port");

        btnConnecter.setText("Connecter");
        btnConnecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnecterAction(evt);
            }
        });

        jLabel3.setText("Message à envoyer");

        txtMessageAenvoyer.setColumns(20);
        txtMessageAenvoyer.setRows(5);
        txtMessageAenvoyer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMessageAenvoyer_mouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(txtMessageAenvoyer);

        jLabel4.setText("Messages reçus");

        txtMessagesRecus.setColumns(20);
        txtMessagesRecus.setRows(5);
        jScrollPane2.setViewportView(txtMessagesRecus);

        btnEnvoyer.setText("Envoyer");
        btnEnvoyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnvoyerAction(evt);
            }
        });

        btnDeconnecter.setText("Déconnecter");
        btnDeconnecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeconnecterAction(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIPServeur)
                                    .addComponent(txtPort, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDeconnecter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEnvoyer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConnecter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtIPServeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnConnecter)))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnEnvoyer)))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeconnecter)
                        .addGap(58, 58, 58))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Crée un socket de communication avec le serveur en utilisant l'adresse IP et le port
     * saisis dans txtIPserveur et txtPort. Si la demande est acceptée, mémorise dans les attributs
     * in et out les flux d'entrée et sortie du socket, bloque la partie connexion de l'ihm 
     * et débloque la partie communication de l'ihm. 
     * Affiche un message si l'adresse IP ou le port siaisis sont incorrects ou la demande échoue.
     */
    private void btnConnecterAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnecterAction
        if(txtIPServeur.getText().isEmpty() || txtPort.getText().isEmpty())
            JOptionPane.showMessageDialog(this,"IP ou port serveur non saisi(s) !");
        else 
          try {
            InetAddress ipServeur 
                    = InetAddress.getByName(txtIPServeur.getText());
            int portServeur = Integer.parseInt(txtPort.getText()) ;
            // Demande connexion et récupération des cannaux d'entrée
            // et sortie du socket
            socket = new Socket(ipServeur, portServeur); 
            in = new BufferedReader (
                    new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(
                    new OutputStreamWriter(socket.getOutputStream()), true);
            // Désactiver la partie "connexion" de l'ihm
            // et activer la partie "communication" de l'ihm 
            txtIPServeur.setEnabled(false);
            txtPort.setEnabled(false);
            btnConnecter.setEnabled(false);
            // Activer la partie de l'ihm relative à la communication 
            txtMessageAenvoyer.setEnabled(true);
            btnEnvoyer.setEnabled(true);
            btnDeconnecter.setEnabled(true);
            txtMessageAenvoyer.setText("Saisir votre message"); // Remettre à vide si reconnexion
            txtMessagesRecus.setText("");   // Remettre à vide si reconnexion
	} 
        catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(this,"IP serveur incorrecte !");
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,"Port serveur incorrect !");
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(this,"Erreur : "+e);
        }
    }//GEN-LAST:event_btnConnecterAction

    /**
     * Envoyer le message saisi dans txyMessageAenvoyer au serveur en le mettant dans 
     * le canal out. Lire ensuite l'accusé réception du serveur sur le canal in et l'afficher
     * dans txtMessagesRecus.
     * Affiche un message d'erreur si txtMessagaAenvoyer est vide ou contient le message "FIN".
     */
    private void btnEnvoyerAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnvoyerAction
        String messageEnvoye = txtMessageAenvoyer.getText();
        if (messageEnvoye.isEmpty()) 
            JOptionPane.showMessageDialog(this,"Aucun message saisi !");
        else if (messageEnvoye.equals("FIN")) {
            JOptionPane.showMessageDialog(this,"Le message \"FIN\" est un message réservé !");
        }
        else try {
            // Envoi message au serveur
            out.println(txtMessageAenvoyer.getText());
            // Lecture et affichage réponse serveur 
            txtMessagesRecus.append(in.readLine()+"\n");
            
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(this,"Erreur"+e);
        }
    }//GEN-LAST:event_btnEnvoyerAction

    /**
     * Envoie le message "FIN" au serveur sur le canal out, lit l'accusé réception du serveur
     * sur le canal out et l'affiche dans txtMessagesRecus, ferme le socket de communication avec
     * le serveur, débloque la partie connexion de l'ihm et bloque la partie communication de l'ihm.
     */
    private void btnDeconnecterAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeconnecterAction
        try {
            // Envoyer "FIN" au serveur
            out.println("FIN"); // Envoyer "FIN" au serveur
            // Afficher réponse serveur
            txtMessagesRecus.append(in.readLine()+"\n"); 
            socket.close(); // Ferme aussi les canaux in et out.
            // Désactiver la zone "Message à envoyer" et les boutons Envoyer et Déconnecter 
            // et réactiver les zones IP-serveur et Port et le bouton Connecter
            txtMessageAenvoyer.setEnabled(false);
            btnEnvoyer.setEnabled(false);
            btnDeconnecter.setEnabled(false);
            txtIPServeur.setEnabled(true);
            txtPort.setEnabled(true);
            btnConnecter.setEnabled(true);
        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(this,"Erreur : "+e);
        }
    }//GEN-LAST:event_btnDeconnecterAction

    private void txtMessageAenvoyer_mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMessageAenvoyer_mouseClicked
        txtMessageAenvoyer.setText("");
    }//GEN-LAST:event_txtMessageAenvoyer_mouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnecter;
    private javax.swing.JButton btnDeconnecter;
    private javax.swing.JButton btnEnvoyer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtIPServeur;
    private javax.swing.JTextArea txtMessageAenvoyer;
    private javax.swing.JTextArea txtMessagesRecus;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
}
