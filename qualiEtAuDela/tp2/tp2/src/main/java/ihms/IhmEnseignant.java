package ihms;

import donnees.Enseignant;
import donnees.Etudiant;
import donnees.Matiere;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import utilitaires_ihms.GestionNotes;
import utilitaires_ihms.GestionVerrou;

public class IhmEnseignant extends javax.swing.JFrame {
    /** Enseignant connecté */
    private Enseignant enseignant ;
    /** Matières enseignées par cet enseignant */
    private ArrayList<Matiere> matieresEnseignees = new ArrayList();
    /** Etudiants inscrits dans la matière sélectionnée dans comboMatiere */
    private ArrayList<Etudiant> etudiantsInscrits; 
    
    /**
     * Mémoriser l'enseignant, appeler GestionNores.matieresEnseignees(e) pour obtenir
     * les matières enseignées et les mémoriser dans matieresEnseignéees, puis remplir
     * la liste comboMatieresEnseignant avec les ids de ces matières.
     */
    public IhmEnseignant(Enseignant enseignant) {    
        this.enseignant = enseignant;
        initComponents();
        // Mettre dans l'attribut matieresEnseignees les objets instance
        // de la classe Matiere correspondants 
        matieresEnseignees = GestionNotes.matieresEnseignees(enseignant); 
        // Remplir la liste comboMatieresEnseignant avec les ids des matières
        // enseignées
        ArrayList<String> idsMatieresEnseignant = enseignant.getIdsMatieresEnseignees();    
        comboMatiere.removeAllItems();
        for(String m: idsMatieresEnseignant) comboMatiere.addItem(m);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings(value = "unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboMatiere = new javax.swing.JComboBox<>();
        btnModifierNote = new javax.swing.JButton();
        btnQuitter = new javax.swing.JButton();
        comboEtudiant = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNote = new javax.swing.JTextField();
        btnSupprimerNote = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Session Enseignant");

        jLabel3.setText("Matiere");

        comboMatiere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMatiereAction(evt);
            }
        });

        btnModifierNote.setText("Modifier note");
        btnModifierNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifierNoteAction(evt);
            }
        });

        btnQuitter.setText("Quitter");
        btnQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitterAction(evt);
            }
        });

        comboEtudiant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEtudiantAction(evt);
            }
        });

        jLabel4.setText("Etudiant");

        jLabel5.setText("Note");

        btnSupprimerNote.setText("Supprimer note");
        btnSupprimerNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupprimerNoteAction(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboMatiere, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(comboEtudiant, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnModifierNote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnQuitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSupprimerNote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboMatiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifierNote))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboEtudiant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSupprimerNote))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuitter))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /** 
     * Déterminer les objets étudiants inscrits dans la matière sélectionnée en appelant
     * GestionNotes.etudiantsInscrits(Matiere) et les mémoriser dans etudiantsInscrits,
     * puis afficher les noms et prénoms de ces étudiants dans comboMatiere.
     */
    private void comboMatiereAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMatiereAction
        if (comboMatiere.getSelectedIndex()>=0) // Une matière sélectionnée
        {
            // 1. Récupérer la matière sélectionnée
            Matiere matiere = matieresEnseignees
                .get(comboMatiere.getSelectedIndex());
            // 2. Déterminer les étudiants inscrits dans la matière sélectionnée
            // et afficher leurs noms et prénoms 
            etudiantsInscrits = GestionNotes.etudiantsInscrits(matiere);
            comboEtudiant.removeAllItems();
            for(Etudiant etudiant: etudiantsInscrits)
              comboEtudiant.addItem(etudiant.getNom()+" "+etudiant.getPrenom());
        }
    }//GEN-LAST:event_comboMatiereAction
    
    /** 
     * Ajouter ou modifier la note saisie dans txtNote pour l'étudiant sélectionné en
     * la matière sélectionnée, dans la base de données et dans l'objet Etudiant. 
     * Afficher un message d'erreur sans ajout ni modification si la note est mal saisie
     * ou en cas de problème d'accès à base de données.
     */
    private void btnModifierNoteAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifierNoteAction
        if(txtNote.getText().isEmpty()) 
            JOptionPane.showMessageDialog(this, 
                    "Saisir une note !");
        else if (comboMatiere.getSelectedIndex()>=0     // Une matière sélectionné
          && comboEtudiant.getSelectedIndex()>=0)  // et un étudiant sélectionné
        {
            // 1. Récupérer l'id de la matière sélectionnée
            // et l'étudiant sélectionné
            String idMatiere = (String) comboMatiere.getSelectedItem();
            Etudiant etudiant = etudiantsInscrits
                    .get(comboEtudiant.getSelectedIndex());
            // 2. Ajouter ou modifier la note si elle est correctement saisie
            try {
                Float note = Float.valueOf(txtNote.getText());
                if (note >= 0 && note <= 20) {
                    if(etudiant.note(idMatiere)== -1) { // Cas note absente, on l'ajoute
                        GestionNotes.ajouterNote(etudiant,idMatiere,note); 
                    }
                    else { // Cas note existante, on la modifie
                        GestionNotes.modifierNote(etudiant,idMatiere, note);
                    }
                }
                else JOptionPane.showMessageDialog(this, "Note mal saisie !");               
            }
            catch(NumberFormatException ex1) {
                JOptionPane.showMessageDialog(this, "Note mal saisie !");
            }
            catch(Exception ex2) {
                JOptionPane.showMessageDialog(this,ex2.getMessage());
            }
        }
    }//GEN-LAST:event_btnModifierNoteAction

    private void btnQuitterAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitterAction
        // Enregistrer les données et lever le verrou sur les données 
        // avant de quitter l'application
        try {
          GestionVerrou.deVerrouiller();
          this.setVisible(false);
          System.out.println("Application arrêtée !");
          System.exit(0); // Tout arrêter
        }
        catch(IOException e) { 
          System.out.println("Erreur lors du déverrouillage des données !"); 
        }
    }//GEN-LAST:event_btnQuitterAction
    /**
     * Rechercher la note de l'étudiant sélectionné pour la matière sélectionnée et
     * l'afficher dans la zone txtNote.
    */
    private void comboEtudiantAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEtudiantAction
        if (comboMatiere.getSelectedIndex()>=0     // Une matière sélectionné
          && comboEtudiant.getSelectedIndex()>=0)// et un étudiant sélectionné
        {
            // 1. Récupérer la matière et l'étudiant sélectionnés
            Matiere matiere = matieresEnseignees
                    .get(comboMatiere.getSelectedIndex()); 
            Etudiant etudiant = etudiantsInscrits
                    .get(comboEtudiant.getSelectedIndex());
            // 2. Afficher la note ou "" si absence de note (indiquée par -1)
            float note = etudiant.note(matiere.getId());
            if(note == -1) txtNote.setText("");
            else txtNote.setText(""+note);
        }
    }//GEN-LAST:event_comboEtudiantAction

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      // Idem action du bouton quitter : enregistrer les données et lever le verrouillage des 
      // données avant de quitter l'application        
      try {
        GestionVerrou.deVerrouiller();
        this.setVisible(false);
        System.out.println("Application arrêtée !");
        System.exit(0); // Tout arrêter
      }
      catch(IOException e) { 
        System.out.println("Erreur lors du déverrouillage des données !"); 
      }
    }//GEN-LAST:event_formWindowClosing

    /** 
     * Supprimer la note pour l'étudiant sélectionné en la matière sélectionnée, dans
     * la base de données et dans l'objet Etudiant.
     * Afficher un message si pas de note à supprimer ou en cas de problème d'accès à
     * la base de données.
     */
    private void btnSupprimerNoteAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupprimerNoteAction
        if(txtNote.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "Pas de note à supprimer !");
        if (comboMatiere.getSelectedIndex()>=0            // Une matière sélectionné
                && comboEtudiant.getSelectedIndex()>=0) { // et un étudiant sélectionné
            // 1. Récupérer l'id de la matière et l'étudiant sélectionnés
            String idMatiere = (String) comboMatiere.getSelectedItem();
            Etudiant etudiant = etudiantsInscrits
                    .get(comboEtudiant.getSelectedIndex());
            // 2. Supprimer la note dans la base de données et dans l'objet
            // puis effacer la zone txtNote.
            try {
                GestionNotes.supprimerNote(etudiant,idMatiere);  
                txtNote.setText("");
            }
            catch(Exception ex2) {
                JOptionPane.showMessageDialog(this,ex2.getMessage());
            }
        }
    }//GEN-LAST:event_btnSupprimerNoteAction


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModifierNote;
    private javax.swing.JButton btnQuitter;
    private javax.swing.JButton btnSupprimerNote;
    private javax.swing.JComboBox<String> comboEtudiant;
    private javax.swing.JComboBox<String> comboMatiere;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtNote;
    // End of variables declaration//GEN-END:variables
}
